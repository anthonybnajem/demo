{"version":3,"sources":["views/ui-elements/basic/BasicButton.js","components/Widgets/Statistic/Notification.js","components/Card/MainCard.js"],"names":["BasicButton","buttonVariants","buttonOptions","variant","icon","basicButtons","map","idx","overlay","className","outlineButtons","squareButtons","basicDropdownButton","button","title","id","Item","eventKey","splitDropdownButton","Divider","Fragment","sm","message","link","Notification","props","Link","href","target","MainCard","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","isOption","children","cardClass","optionClass","useState","fullCard","setFullCard","collapseCard","setCollapseCard","loadCard","setloadCard","cardRemove","setCardRemove","windowSize","useWindowSize","mainCardClass","alignRight","Toggle","Menu","as","onClick","to","setInterval","Header","Title","position","top","left","right","width","height","join","style","in","Body"],"mappings":"sGAAA,0IA6HeA,UA7GK,WAClB,IAAMC,EAAiB,CAAC,UAAW,YAAa,UAAW,SAAU,UAAW,OAAQ,QAAS,QAE3FC,EAAgB,CACpB,CAAEC,QAAS,UAAWC,KAAM,+BAC5B,CAAED,QAAS,YAAaC,KAAM,4BAC9B,CAAED,QAAS,UAAWC,KAAM,kCAC5B,CAAED,QAAS,SAAUC,KAAM,2BAC3B,CAAED,QAAS,UAAWC,KAAM,oCAC5B,CAAED,QAAS,OAAQC,KAAM,2BAGrBC,EAAeJ,EAAeK,KAAI,SAACH,EAASI,GAAV,OACtC,cAAC,IAAD,CAA0BC,QAAS,cAAC,IAAD,UAAUL,IAA7C,SACE,cAAC,IAAD,CAAQA,QAASA,EAASM,UAAU,kBAApC,SACGN,KAFgBI,MAOjBG,EAAiBT,EAAeK,KAAI,SAACH,EAASI,GAAV,OACxC,cAAC,IAAD,CAA0BC,QAAS,cAAC,IAAD,UAAU,WAAaL,IAA1D,SACE,cAAC,IAAD,CAAQA,QAAS,WAAaA,EAASM,UAAU,kBAAjD,SACGN,KAFgBI,MAOjBI,EAAgBV,EAAeK,KAAI,SAACH,EAASI,GAAV,OACvC,cAAC,IAAD,CAAkBE,UAAU,6BAA6BN,QAASA,EAAlE,SACGA,GADUI,MAMTK,EAAsBV,EAAcI,KAAI,SAACO,GAC7C,IAAMC,EAAQD,EAAOV,QACrB,OACE,eAAC,IAAD,CACEM,UAAU,kBACVK,MAAOA,EACPX,QAASU,EAAOV,QAChBY,GAAE,4BAAuBF,EAAOV,SAJlC,UAOE,cAAC,IAASa,KAAV,CAAeC,SAAS,IAAxB,oBACA,cAAC,IAASD,KAAV,CAAeC,SAAS,IAAxB,4BACA,cAAC,IAASD,KAAV,CAAeC,SAAS,IAAxB,mCAJKJ,EAAOV,YASZe,EAAsBhB,EAAcI,KAAI,SAACO,GAC7C,IAAMC,EAAQD,EAAOV,QACrB,OACE,eAAC,IAAD,CACEW,MAAOA,EACPX,QAASU,EAAOV,QAChBY,GAAE,kCAA6BF,EAAOV,SAEtCM,UAAU,4BALZ,UAOE,cAAC,IAASO,KAAV,CAAeC,SAAS,IAAxB,oBACA,cAAC,IAASD,KAAV,CAAeC,SAAS,IAAxB,4BACA,cAAC,IAASD,KAAV,CAAeC,SAAS,IAAxB,iCACA,cAAC,IAASE,QAAV,IACA,cAAC,IAASH,KAAV,CAAeC,SAAS,IAAxB,8BAPKJ,EAAOV,YAalB,OACE,eAAC,IAAMiB,SAAP,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,GAAI,GAAT,SACE,cAAC,IAAD,CACEC,QAAQ,qEACRC,KAAK,8DAIX,cAAC,IAAD,CAAKd,UAAU,WAAf,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAMK,MAAM,UAAZ,UACGT,EACD,cAAC,IAAD,CAAgBG,QAAS,cAAC,IAAD,mBAAzB,SACE,cAAC,IAAD,CAAQL,QAAQ,OAAhB,uBAGJ,cAAC,IAAD,CAAMW,MAAM,UAAZ,SAAuBJ,IACvB,cAAC,IAAD,CAAMI,MAAM,gBAAZ,SAA6BH,SAGjC,cAAC,IAAD,CAAKF,UAAU,WAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMK,MAAM,wBAAZ,SACE,cAAC,IAAD,UAAgBF,MAElB,cAAC,IAAD,CAAME,MAAM,wBAAZ,SACE,cAAC,IAAD,UAAgBI,gB,iCCpH5B,oCAgBeM,IAbM,SAACC,GACpB,OACE,cAAC,IAAML,SAAP,UACE,eAAC,IAAD,CAAOjB,QAAQ,UAAf,UACGsB,EAAMH,QACP,cAAC,IAAMI,KAAP,CAAYC,KAAMF,EAAMF,KAAMK,OAAO,SAASnB,UAAU,cAAxD,yC,uHCiGOoB,IAnGE,SAACJ,GAChB,IAoBIK,EAAiBC,EAAQC,EAAiBC,EAC1CC,EArBIC,EAAsDV,EAAtDU,SAAUrB,EAA4CW,EAA5CX,MAAOsB,EAAqCX,EAArCW,SAAUC,EAA2BZ,EAA3BY,UAAWC,EAAgBb,EAAhBa,YAE9C,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAEMC,EAAaC,cAefC,EAAgB,GAyEpB,OAvEIf,IACFH,EACE,qBAAKvB,UAAW,qBAAuB6B,EAAvC,SACE,eAAC,IAAD,CAAUa,YAAY,EAAM1C,UAAU,wBAAtC,UACE,cAAC,IAAS2C,OAAV,CAAiBrC,GAAG,iBAAiBN,UAAU,WAA/C,SACE,mBAAGA,UAAU,mCAEf,eAAC,IAAS4C,KAAV,CAAeC,GAAG,KAAK7C,UAAU,4BAAjC,UACE,eAAC,IAASO,KAAV,CAAesC,GAAG,KAAK7C,UAAU,gBAAgB8C,QAAS,kBAAMd,GAAaD,IAA7E,UACE,mBAAG/B,UAAW+B,EAAW,wBAA0B,0BACnD,eAAC,IAAD,CAAMgB,GAAG,IAAT,cAAehB,EAAW,UAAY,WAAtC,UAEF,eAAC,IAASxB,KAAV,CAAesC,GAAG,KAAK7C,UAAU,gBAAgB8C,QAAS,kBAAMZ,GAAiBD,IAAjF,UACE,mBAAGjC,UAAWiC,EAAe,oBAAsB,uBACnD,eAAC,IAAD,CAAMc,GAAG,IAAT,cAAed,EAAe,SAAW,WAAzC,UAEF,eAAC,IAAS1B,KAAV,CAAesC,GAAG,KAAK7C,UAAU,gBAAgB8C,QA/BjC,WACxBV,GAAY,GACZY,aAAY,WACVZ,GAAY,KACX,MA2BK,UACE,mBAAGpC,UAAU,4BACb,cAAC,IAAD,CAAM+C,GAAG,IAAT,yBAEF,eAAC,IAASxC,KAAV,CAAesC,GAAG,KAAK7C,UAAU,gBAAgB8C,QA5BjC,WACxBR,GAAc,IA2BN,UACE,mBAAGtC,UAAU,uBACb,cAAC,IAAD,CAAM+C,GAAG,IAAT,kCAQZvB,EACE,eAAC,IAAKyB,OAAN,WACE,cAAC,IAAKC,MAAN,CAAYL,GAAG,KAAf,SAAqBxC,IACpBkB,KAIDQ,IACFU,EAAa,sBAAOA,GAAP,CAAsB,cACnCpB,EAAkB,CAAE8B,SAAU,QAASC,IAAK,EAAGC,KAAM,EAAGC,MAAO,EAAGC,MAAOhB,EAAWgB,MAAOC,OAAQjB,EAAWiB,SAG5GrB,IACFM,EAAa,sBAAOA,GAAP,CAAsB,cACnCnB,EACE,qBAAKtB,UAAU,cAAf,SACE,mBAAGA,UAAU,+BAKfqC,IACFI,EAAa,sBAAOA,GAAP,CAAsB,YAGjCb,IACFa,EAAa,sBAAOA,GAAP,CAAsBb,KAGrCH,EACE,eAAC,IAAD,CAAMzB,UAAWyC,EAAcgB,KAAK,KAAMC,MAAOrC,EAAjD,UACGG,EACD,cAAC,IAAD,CAAUmC,IAAK1B,EAAf,SACE,8BACE,cAAC,IAAK2B,KAAN,UAAYjC,QAGfL,KAIE,cAAC,IAAMX,SAAP,UAAiBc","file":"static/js/25.4933d461.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Row,\n  Col,\n  Button,\n  OverlayTrigger,\n  Tooltip,\n  ButtonToolbar,\n  Dropdown,\n  DropdownButton,\n  SplitButton\n} from 'react-bootstrap';\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification';\n\nimport Card from '../../../components/Card/MainCard';\n\nconst BasicButton = () => {\n  const buttonVariants = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'];\n\n  const buttonOptions = [\n    { variant: 'primary', icon: 'feather icon-thumbs-up mx-1' },\n    { variant: 'secondary', icon: 'feather icon-camera mx-1' },\n    { variant: 'success', icon: 'feather icon-check-circle mx-1' },\n    { variant: 'danger', icon: 'feather icon-slash mx-1' },\n    { variant: 'warning', icon: 'feather icon-alert-triangle mx-1' },\n    { variant: 'info', icon: 'feather icon-info mx-1' }\n  ];\n\n  const basicButtons = buttonVariants.map((variant, idx) => (\n    <OverlayTrigger key={idx} overlay={<Tooltip>{variant}</Tooltip>}>\n      <Button variant={variant} className=\"text-capitalize\">\n        {variant}\n      </Button>\n    </OverlayTrigger>\n  ));\n\n  const outlineButtons = buttonVariants.map((variant, idx) => (\n    <OverlayTrigger key={idx} overlay={<Tooltip>{'outline-' + variant}</Tooltip>}>\n      <Button variant={'outline-' + variant} className=\"text-capitalize\">\n        {variant}\n      </Button>\n    </OverlayTrigger>\n  ));\n\n  const squareButtons = buttonVariants.map((variant, idx) => (\n    <Button key={idx} className=\"btn-square text-capitalize\" variant={variant}>\n      {variant}\n    </Button>\n  ));\n\n\n  const basicDropdownButton = buttonOptions.map((button) => {\n    const title = button.variant;\n    return (\n      <DropdownButton\n        className=\"text-capitalize\"\n        title={title}\n        variant={button.variant}\n        id={`dropdown-variants-${button.variant}`}\n        key={button.variant}\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\n      </DropdownButton>\n    );\n  });\n\n  const splitDropdownButton = buttonOptions.map((button) => {\n    const title = button.variant;\n    return (\n      <SplitButton\n        title={title}\n        variant={button.variant}\n        id={`dropdown-split-variants-${button.variant}`}\n        key={button.variant}\n        className=\"mr-2 mb-2 text-capitalize\"\n      >\n        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n      </SplitButton>\n    );\n  });\n\n\n  return (\n    <React.Fragment>\n      <Row>\n        <Col sm={12}>\n          <ModuleNotification\n            message=\"For more info please check the components's official documentation\"\n            link=\"https://react-bootstrap.github.io/components/buttons/\"\n          />\n        </Col>\n      </Row>\n      <Row className=\"btn-page\">\n        <Col>\n          <Card title=\"Default\">\n            {basicButtons}\n            <OverlayTrigger overlay={<Tooltip>link</Tooltip>}>\n              <Button variant=\"link\">Link</Button>\n            </OverlayTrigger>\n          </Card>\n          <Card title=\"Outline\">{outlineButtons}</Card>\n          <Card title=\"Square Button\">{squareButtons}</Card>\n        </Col>\n      </Row>\n      <Row className=\"btn-page\">\n        <Col>\n          <Card title=\"Basic Dropdown Button\">\n            <ButtonToolbar>{basicDropdownButton}</ButtonToolbar>\n          </Card>\n          <Card title=\"Split Dropdown Button\">\n            <ButtonToolbar>{splitDropdownButton}</ButtonToolbar>\n          </Card>\n        </Col>\n      </Row>\n      \n    </React.Fragment>\n  );\n};\n\nexport default BasicButton;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst Notification = (props) => {\n  return (\n    <React.Fragment>\n      <Alert variant=\"warning\">\n        {props.message}\n        <Alert.Link href={props.link} target=\"_blank\" className=\"float-right\">\n          Demo & Documentation\n        </Alert.Link>\n      </Alert>\n    </React.Fragment>\n  );\n};\n\nexport default Notification;\n","import React, { useState } from 'react';\nimport { Dropdown, Card, Collapse } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport useWindowSize from '../../hooks/useWindowSize';\n\nconst MainCard = (props) => {\n  const { isOption, title, children, cardClass, optionClass } = props;\n\n  const [fullCard, setFullCard] = useState(false);\n  const [collapseCard, setCollapseCard] = useState(false);\n  const [loadCard, setloadCard] = useState(false);\n  const [cardRemove, setCardRemove] = useState(false);\n\n  const windowSize = useWindowSize();\n\n  const cardReloadHandler = () => {\n    setloadCard(true);\n    setInterval(() => {\n      setloadCard(false);\n    }, 3000);\n  };\n\n  const cardRemoveHandler = () => {\n    setCardRemove(true);\n  };\n\n  let fullScreenStyle, loader, cardHeaderRight, cardHeader;\n  let card = '';\n  let mainCardClass = [];\n\n  if (isOption) {\n    cardHeaderRight = (\n      <div className={'card-header-right ' + optionClass}>\n        <Dropdown alignRight={true} className=\"btn-group card-option\">\n          <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\n            <i className=\"feather icon-more-horizontal\" />\n          </Dropdown.Toggle>\n          <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\n            <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={() => setFullCard(!fullCard)}>\n              <i className={fullCard ? 'feather icon-minimize' : 'feather icon-maximize'} />\n              <Link to=\"#\"> {fullCard ? 'Restore' : 'Maximize'} </Link>\n            </Dropdown.Item>\n            <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={() => setCollapseCard(!collapseCard)}>\n              <i className={collapseCard ? 'feather icon-plus' : 'feather icon-minus'} />\n              <Link to=\"#\"> {collapseCard ? 'Expand' : 'Collapse'} </Link>\n            </Dropdown.Item>\n            <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={cardReloadHandler}>\n              <i className=\"feather icon-refresh-cw\" />\n              <Link to=\"#\"> Reload </Link>\n            </Dropdown.Item>\n            <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={cardRemoveHandler}>\n              <i className=\"feather icon-trash\" />\n              <Link to=\"#\"> Remove </Link>\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n    );\n  }\n\n  cardHeader = (\n    <Card.Header>\n      <Card.Title as=\"h5\">{title}</Card.Title>\n      {cardHeaderRight}\n    </Card.Header>\n  );\n\n  if (fullCard) {\n    mainCardClass = [...mainCardClass, 'full-card'];\n    fullScreenStyle = { position: 'fixed', top: 0, left: 0, right: 0, width: windowSize.width, height: windowSize.height };\n  }\n\n  if (loadCard) {\n    mainCardClass = [...mainCardClass, 'card-load'];\n    loader = (\n      <div className=\"card-loader\">\n        <i className=\"pct-loader1 anim-rotate\" />\n      </div>\n    );\n  }\n\n  if (cardRemove) {\n    mainCardClass = [...mainCardClass, 'd-none'];\n  }\n\n  if (cardClass) {\n    mainCardClass = [...mainCardClass, cardClass];\n  }\n\n  card = (\n    <Card className={mainCardClass.join(' ')} style={fullScreenStyle}>\n      {cardHeader}\n      <Collapse in={!collapseCard}>\n        <div>\n          <Card.Body>{children}</Card.Body>\n        </div>\n      </Collapse>\n      {loader}\n    </Card>\n  );\n\n  return <React.Fragment>{card}</React.Fragment>;\n};\n\nexport default MainCard;\n"],"sourceRoot":""}